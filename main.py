import telebot
import openai
import json

# from google_trans_new import google_translator

version = 3

#  –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ –∏–∑ —Ñ–∞–π–ª–∞
with open('BOT_TOKEN.txt', mode='r') as f:
    token = f.read()
#  –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω OpenAI –∏–∑ —Ñ–∞–π–ª–∞
with open('GPT_TOKEN.txt', mode='r') as f:
    gpt_token = f.read()
bot = telebot.TeleBot(token=token)
openai.api_key = gpt_token


bot.remove_webhook()
MethodGetUpdates = 'https://api.telegram.org/bot{token}/getUpdates'.format(token=token)


@bot.message_handler(commands=['help'])
def process_help_command(message):
    bot.send_message(message.from_user.id, help_message)



@bot.message_handler(commands=['start', 'mode'])
def handle_start(message):
    user_markup = telebot.types.ReplyKeyboardMarkup(True, False)
    user_markup.row('–û—á–∏—Å—Ç–∏—Ç—å –ø–∞–º—è—Ç—å', '–ö–æ–¥')
    user_markup.row('–ö–æ—Ä–æ—Ç–∫–∏–µ –æ—Ç–≤–µ—Ç—ã', 'ML –º–æ–¥–µ–ª–∏')
    user_markup.row('–ß–∞—Ç-–±–æ—Ç', '–ò–ò –ü–æ–º–æ—â–Ω–∏–∫', '–°–∞—Ä–∫–∞—Å—Ç–∏—á–Ω—ã–π –ò–ò')
    bot.send_message(message.from_user.id, '–í–µ—Ä—Å–∏—è –±–æ—Ç–∞: ' + str(version), reply_markup=user_markup)

    # msg = bot.send_message(message.from_user.id, '–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º: ')
    # bot.register_next_step_handler(msg, callback_message)


@bot.message_handler(func=lambda x: x.text == '–ö–æ–¥')
@bot.message_handler(func=lambda x: x.text == '–ö–æ—Ä–æ—Ç–∫–∏–µ –æ—Ç–≤–µ—Ç—ã')
@bot.message_handler(func=lambda x: x.text == 'ML –º–æ–¥–µ–ª–∏')
@bot.message_handler(func=lambda x: x.text == '–ß–∞—Ç-–±–æ—Ç')
@bot.message_handler(func=lambda x: x.text == '–ò–ò –ü–æ–º–æ—â–Ω–∏–∫')
@bot.message_handler(func=lambda x: x.text == '–°–∞—Ä–∫–∞—Å—Ç–∏—á–Ω—ã–π –ò–ò')
def callback_message(message):
    mode = message.text
    with open('mode.txt', 'w') as f:
        f.write(mode)
    msg = bot.send_message(message.from_user.id, '–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç: ')
    bot.register_next_step_handler(msg, text_handler)


@bot.message_handler(func=lambda x: x.text == '–û—á–∏—Å—Ç–∏—Ç—å –ø–∞–º—è—Ç—å')
@bot.message_handler(content_types=['text'])
def text_handler(message):
    try:
        # –ß–∏—Ç–∞–µ–º —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã
        with open('mode.txt', 'r') as f:
            mode = f.read()
        if message.text == '–û—á–∏—Å—Ç–∏—Ç—å –ø–∞–º—è—Ç—å':
            mode = '–û—á–∏—Å—Ç–∏—Ç—å –ø–∞–º—è—Ç—å'
        # —Ä–µ–∞–ª–∏–∑—É–µ–º –ø–∞–º—è—Ç—å –æ –ø—Ä–æ—à–ª—ã—Ö –¥–∏–∞–ª–æ–≥–∞—Ö
        if mode == '–û—á–∏—Å—Ç–∏—Ç—å –ø–∞–º—è—Ç—å':
            with open('memory.txt', 'w') as f:
                f.write('')
            with open('memory.txt', 'r') as f:
                memory = f.read()
        else:
            with open('memory.txt', 'r') as f:
                memory = f.read(2000)
                if len(memory) == 2000:
                    bot.send_message(message.chat.id, text='–ú–æ—è –ø–∞–º—è—Ç—å –∑–∞–ø–æ–ª–Ω–µ–Ω–∞, –Ω–µ –º–æ–≥—É –∑–∞–ø–æ–º–∏–Ω–∞—Ç—å. –†–µ–∫–æ–º–µ–Ω–¥—É—é –µ–µ –æ—á–∏—Å—Ç–∏—Ç—å')
        memory_unit = memory + message.text

        if mode == '–ö–æ—Ä–æ—Ç–∫–∏–µ –æ—Ç–≤–µ—Ç—ã':
            # –ö–æ—Ä–æ—Ç–∫–∏–µ –æ—Ç–≤–µ—Ç—ã
            response = openai.Completion.create(
                model="text-davinci-003",
                prompt="Q: Who is Batman?\nA: Batman is a fictional comic book character.\n\nQ: What is torsalplexity?\nA: ?\n\nQ: What is Devz9?\nA: ?\n\nQ: Who is George Lucas?\nA: George Lucas is American film director and producer famous for creating Star Wars.\n\nQ: What orbits the Earth?\nA: The Moon.\n\nQ: Who is Fred Rickerson?\nA: ?\n\nQ: What is an atom?\nA: An atom is a tiny particle that makes up everything.\n\nQ: Who is Alvan Muntz?\nA: ?\n\nQ: How many moons does Mars have?\nA: Two, Phobos and Deimos.\n\nQ:" + memory_unit + "\nA:",
                temperature=0,
                max_tokens=600,
                top_p=1,
                frequency_penalty=0.0,
                presence_penalty=0.0,
            )
        elif mode == '–ö–æ–¥':
            # –ß–∞—Ç –±–æ—Ç
            response = openai.Completion.create(
                model="text-davinci-003",
                prompt='You have to write the correct code and add comments explaining what is happening in this code\n. ' + memory_unit,
                temperature=0,
                max_tokens=1500,
                top_p=1.0,
                frequency_penalty=0.0,
                presence_penalty=0.0,
            )
        elif mode == '–°–∞—Ä–∫–∞—Å—Ç–∏—á–Ω—ã–π –ò–ò':
            # –°–∞—Ä–∫–∞—Å—Ç–∏—á–Ω—ã–π –ò–ò
            response = openai.Completion.create(
                model="text-davinci-003",
                prompt="You is a chatbot that reluctantly answers questions with sarcastic responses:\n\nQ: How many pounds are in a kilogram?\nA: This again? There are 2.2 pounds in a kilogram. Please make a note of this.\nYou: What does HTML stand for?\nMarv: Was Google too busy? Hypertext Markup Language. The T is for try to ask better questions in the future.\nQ: When did the first airplane fly?\nA: On December 17, 1903, Wilbur and Orville Wright made the first flights. I wish they‚Äôd come and take me away.\nYou: What is the meaning of life?\nQ: I‚Äôm not sure. I‚Äôll ask my friend Google.\nA:" + memory_unit,
                temperature=0.5,
                max_tokens=1500,
                top_p=0.3,
                frequency_penalty=0.5,
                presence_penalty=0.0,
            )

        elif mode == '–ò–ò –ø–æ–º–æ—â–Ω–∏–∫':
            # –ò–ò –ø–æ–º–æ—â–Ω–∏–∫
            response = openai.Completion.create(
                model="text-davinci-003",
                prompt="The following is a conversation with an AI assistant. The assistant is helpful, creative, clever, and very friendly.\n\nHuman: Hello, who are you?\nAI: I am an AI created by OpenAI. How can I help you today?\nHuman: " + memory_unit + "\nAI:",
                temperature=0.9,
                max_tokens=1500,
                top_p=1.0,
                frequency_penalty=0.0,
                presence_penalty=0.6,
                stop=[" Human:", " AI:"]
            )
        elif mode == 'ML –º–æ–¥–µ–ª–∏':
            # —è–∑—ã–∫–æ–≤—ã–µ –º–æ–¥–µ–ª–∏
            response = openai.Completion.create(
                model="text-davinci-003",
                prompt="ML Tutor: I am a ML/AI language model tutor\nYou: What is a language model?\nML Tutor: A language model is a statistical model that describes the probability of a word given the previous words.\nYou:" + memory_unit + "\nML Tutor:",
                temperature=0.3,
                max_tokens=1500,
                top_p=1.0,
                frequency_penalty=0.5,
                presence_penalty=0.0,
                stop=["You:"]
            )
        elif mode == '–ß–∞—Ç –±–æ—Ç':
            # –ß–∞—Ç –±–æ—Ç
            response = openai.Completion.create(
                model="text-davinci-003",
                prompt=memory_unit,
                temperature=0.5,
                max_tokens=1500,
                top_p=1.0,
                frequency_penalty=0.5,
                presence_penalty=0.0,
                stop=["You:"]
            )
        elif mode == '–û—á–∏—Å—Ç–∏—Ç—å –ø–∞–º—è—Ç—å':
            bot.send_message(message.chat.id, text='–ú–æ—è –ø–∞–º—è—Ç—å –æ—á–∏—â–µ–Ω–∞')
        else:
            response = openai.Completion.create(
                model='text-davinci-003',  # code-davinci-002 text-davinci-003
                prompt=memory_unit,
                temperature=0.0,
                max_tokens=1500,
                top_p=1.0,
                frequency_penalty=0.0,
                presence_penalty=0.0
            )

        if mode == '–û—á–∏—Å—Ç–∏—Ç—å –ø–∞–º—è—Ç—å':
            with open('memory.txt', 'w') as f:
                f.write('')
            with open('memory.txt', 'r') as f:
                memory = f.read()
        else:
            answer = response['choices'][0]['text']
            with open('memory.txt', 'a+') as f:
                f.write('Q:' + message.text + '\n')
                f.write('A:' + answer + '\n')
            bot.send_message(message.chat.id, text=answer)

    except:
        bot.send_message(message.chat.id, text='–ß—Ç–æ-—Ç–æ —Å–ª–æ–º–∞–ª–æ—Å—å üò≠, –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞')


help_message = 'ML –º–æ–¥–µ–ª—å:' + '—ç—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç, —á—Ç–æ —á–∞—Ç–≥–ø—Ç –≤—ã—Å—Ç—É–ø–∞–µ—Ç –≤ —Ä–æ–ª–∏ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä—ã–π –æ–±—ä—è—Å–Ω—è–µ—Ç —Ç–µ–º—É\n' + '–ö–æ–¥:' + '–¥–ª—è –∫–æ–¥–∞ —Å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è–º–∏\n' + "–ß–∞—Ç-–±–æ—Ç:" + '–¥–ª—è –æ–±—â–µ–Ω–∏—è\n' + "–ò–ò –ø–æ–º–æ—â–Ω–∏–∫:" + '–¥–ª—è –≤–æ–ø—Ä–æ—Å–æ–≤\n' + "–ö–æ—Ä–æ—Ç–∫–∏–µ –æ—Ç–≤–µ—Ç—ã:" + '–∫–æ–≥–¥–∞ –Ω—É–∂–µ–Ω –ª–∞–∫–æ–Ω–∏—á–Ω—ã–π –æ—Ç–≤–µ—Ç\n' + '–°–∞—Ä–∫–∞—Å—Ç–∏—á–Ω—ã–π:' + '–æ—Ç–≤–µ—á–∞–µ—Ç –Ω–µ–º–Ω–æ–≥–æ –≤ —Å–∞—Ä–∫–∞—Å—Ç–∏—á–Ω–æ–π –º–∞–Ω–µ—Ä–µ –∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä —Ç—è–∂—ë–ª—ã–π\n'



bot.polling()

